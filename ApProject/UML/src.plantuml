@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Armoury {
  + Armoury(): 
}
class Assassins {
  + Assassins(User, Troops): 
  ~ haveBeenSeen: boolean
  + move(): void
   haveBeenSeen: boolean
}
class Base {
  + Base(BaseType): 
}
class BaseType {
  + BaseType(String): 
}
class Block {
  + Block(Textures): 
}
class Building {
  + Building(): 
  + getDamaged(): void
}
class BuildingController {
  + BuildingController(): 
  + build(String): Messages?
  + selectBuilding(int, int): Messages?
  + disbandUnit(): Messages?
  + digTunnel(String, int, int): Messages?
  + dropBuilding(int, int, String): Messages?
  + repair(int, int, String): Messages?
}
enum Buildings << enumeration >> {
  - Buildings(double, double, double, double, double): 
  ~ woodNeeded: double
  ~ workerNeeded: double
  ~ rockNeeded: double
  ~ ironNeeded: double
  + valueOf(String): Buildings
  + values(): Buildings[]
   ironNeeded: double
   rockNeeded: double
   workerNeeded: double
   woodNeeded: double
}
enum Colors << enumeration >> {
  + Colors(): 
  + valueOf(String): Colors
  + values(): Colors[]
}
class CommandsUtils {
  + CommandsUtils(): 
}
class ControllerUtils {
  + ControllerUtils(): 
  + captcha(): Messages?
}
enum Direction << enumeration >> {
  + Direction(): 
  + values(): Direction[]
  + valueOf(String): Direction
}
class Farm {
  ~ Farm(FarmType): 
  + generate(): void
}
enum FarmType << enumeration >> {
  - FarmType(Food, String, double, double): 
  + values(): FarmType[]
  + valueOf(String): FarmType
}
class FireTowers {
  + FireTowers(User, Troops): 
  + attack(): void
}
enum Food << enumeration >> {
  - Food(String): 
  + values(): Food[]
  + valueOf(String): Food
}
class FoodStockpile {
  + FoodStockpile(): 
  ~ foods: ArrayList<Food>
  + addFood(): void
   foods: ArrayList<Food>
   food: Food
}
class Game {
  + Game(): 
}
class GameSwitcher {
  + GameSwitcher(): 
  + run(Scanner): void
}
class GameSwitcherMessages {
  + GameSwitcherMessages(): 
}
enum Good << enumeration >> {
  - Good(int, String): 
  + values(): Good[]
  + valueOf(String): Good
}
class HorseArchers {
  + HorseArchers(User, Troops, double, double, double): 
}
class Kingdom {
  + Kingdom(): 
  - fear: int
  - popularity: int
  - foods: HashMap<Food, Double>
  - taxRate: int
   taxRate: int
   foods: HashMap<Food, Double>
   popularity: int
   fear: int
}
class KingdomController {
  + KingdomController(): 
  + showPopularityFactors(): Messages
}
class LadderMan {
  + LadderMan(): 
  + putLadder(): void
}
enum LoginCommands << enumeration >> {
  - LoginCommands(String): 
  + getMatcher(String, LoginCommands): Matcher
  + valueOf(String): LoginCommands
  + values(): LoginCommands[]
}
class LoginController {
  + LoginController(): 
  + checkAnswerCorrectness(String, String): Messages?
  + forgotMyPassword(String): Messages?
  + loginUser(String, String): Messages?
}
class LoginMenu {
  + LoginMenu(): 
  - userCreate(): void
  - userLogin(): boolean
  - user(): void
  + run(Scanner): MenuSwitcherMessages?
}
class Main {
  + Main(): 
  + main(String[]): void
}
class MainMenu {
  + MainMenu(): 
  - startNewGame(Matcher): boolean
  - logout(Matcher): boolean
  + run(Scanner): MenuSwitcherMessages?
}
enum MainMenuCommands << enumeration >> {
  - MainMenuCommands(String): 
  + getMatcher(String, MainMenuCommands): Matcher?
  + valueOf(String): MainMenuCommands
  + values(): MainMenuCommands[]
}
class Map {
  + Map(int, int): 
}
enum MarketCommands << enumeration >> {
  + MarketCommands(): 
  + valueOf(String): MarketCommands
  + values(): MarketCommands[]
}
class MarketController {
  + MarketController(): 
  + buy(String, String): Messages?
  + showPriceList(): Messages?
  + sell(String, String): Messages?
}
class MarketMenu {
  + MarketMenu(): 
  - buy(Matcher): void
  - sell(Matcher): void
  - showPriceList(Matcher): void
  + run(Scanner): GameSwitcher?
}
enum MarketMessages << enumeration >> {
  + MarketMessages(): 
  + valueOf(String): MarketMessages
  + values(): MarketMessages[]
}
class MenuSwitcher {
  + MenuSwitcher(): 
  + run(): void
}
enum MenuSwitcherCommands << enumeration >> {
  + MenuSwitcherCommands(): 
  + valueOf(String): MenuSwitcherCommands
  + values(): MenuSwitcherCommands[]
}
enum MenuSwitcherMessages << enumeration >> {
  + MenuSwitcherMessages(): 
  + valueOf(String): MenuSwitcherMessages
  + values(): MenuSwitcherMessages[]
}
enum Messages << enumeration >> {
  - Messages(String): 
  - txt: String
  + values(): Messages[]
  + addInput(String): void
  + valueOf(String): Messages
   txt: String
}
class Mine {
  + Mine(MineTypes): 
  + generate(): void
}
enum MineTypes << enumeration >> {
  - MineTypes(Good, String, double, double): 
  + valueOf(String): MineTypes
  + values(): MineTypes[]
}
enum Nationality << enumeration >> {
  + Nationality(): 
  + values(): Nationality[]
  + valueOf(String): Nationality
}
class Ordinary {
  + Ordinary(User, Troops): 
}
enum PermeabilityType << enumeration >> {
  + PermeabilityType(): 
  + values(): PermeabilityType[]
  + valueOf(String): PermeabilityType
}
class Person {
  + Person(): 
}
enum Persons << enumeration >> {
  + Persons(): 
  + valueOf(String): Persons
  + values(): Persons[]
}
class PopularityRiser {
  + PopularityRiser(): 
}
class ProfieMenu {
  + ProfieMenu(): 
  + run(Scanner): MenuSwitcherMessages?
  - profileChange(): void
  - profileDisplaySlogan(): void
}
enum ProfileCommands << enumeration >> {
  - ProfileCommands(String): 
  + getMatcher(String, ProfileCommands): Matcher
  + values(): ProfileCommands[]
  + valueOf(String): ProfileCommands
}
class ProfileController {
  + ProfileController(): 
  + profileChangeNickname(String): Messages?
  + profileDisplayRank(): Messages?
  + profileDisplay(): Messages?
  + profileChangeSlogan(String): Messages?
  + profileChangeUsername(String): Messages?
  + profileDisplayHighScore(): Messages?
  + profileChangePassword(String, String): Messages?
  + profileDisplaySlogan(): Messages?
}
enum RegisterCommands << enumeration >> {
  - RegisterCommands(String): 
  + valueOf(String): RegisterCommands
  + getMatcher(String, RegisterCommands): Matcher
  + values(): RegisterCommands[]
}
class RegisterController {
  + RegisterController(): 
  + userCreate(): Messages?
}
class RegisterMenu {
  + RegisterMenu(): 
  - userCreate(): void
  + run(Scanner): MenuSwitcherMessages?
}
class Score {
  + Score(int, User, Game): 
  - amount: int
  - owner: User
  - game: Game
   amount: int
   owner: User
   game: Game
}
class Slinger {
  + Slinger(User, Troops): 
  + attack(): void
}
class SpearMan {
  + SpearMan(): 
  + diggingDitch(): void
  + throwLadder(): void
}
class StartGameCommands {
  + StartGameCommands(): 
}
class StartGameController {
  + StartGameController(): 
  + startGame(): Messages?
  + setTexture(int, int, String): Messages?
  + dropRock(int, int): Messages?
  + dropTree(int, int, String): Messages?
}
class StartGameMenu {
  + StartGameMenu(): 
  - start(): boolean
  - dropLordHouse(Matcher): void
  - selectMap(Matcher): void
  - removePlayer(Matcher): void
  - addPlayer(Matcher): void
  - dropRock(Matcher): void
  - dropTree(Matcher): void
  + run(Scanner): MenuSwitcherMessages
  - clear(Matcher): void
   texture: Matcher
}
class StoneGatehouse {
  + StoneGatehouse(StoneGatehouses): 
  - type: StoneGatehouses
  + changeTax(): void
   type: StoneGatehouses
}
class StoneGatehouses {
  + StoneGatehouses(double): 
   hp: double
}
enum Textures << enumeration >> {
  + Textures(): 
  + valueOf(String): Textures
  + values(): Textures[]
}
class Tower {
  + Tower(Towers): 
  - type: Towers
  - hp: double
   hp: double
   type: Towers
}
enum Towers << enumeration >> {
  + Towers(): 
  - defendRange: double
  - canGoIn: double
  - hp: double
  - fireRange: double
  + values(): Towers[]
  + valueOf(String): Towers
   hp: double
   fireRange: double
   defendRange: double
   canGoIn: double
}
class Trade {
  + Trade(): 
}
class TradeCommands {
  + TradeCommands(): 
}
class TradeController {
  + TradeController(): 
  + tradeAccept(int): Messages?
  + trade(String, int, int, String): Messages?
  + tradeList(): Messages?
  + tradeHistory(): Messages?
}
class TradeMenu {
  + TradeMenu(): 
  + run(Scanner): GameSwitcherMessages
  - tradeList(): void
  - trade(Matcher): void
  - tradeHistory(): void
}
class TradeMessages {
  + TradeMessages(): 
}
enum TrapTypes << enumeration >> {
  - TrapTypes(int): 
  + valueOf(String): TrapTypes
  + values(): TrapTypes[]
}
class Traps {
  + Traps(TrapTypes): 
  + work(): void
}
enum Trees << enumeration >> {
  + Trees(): 
  + values(): Trees[]
  + valueOf(String): Trees
}
class Troop {
  + Troop(User, Troops): 
  + attack(): void
  + move(): void
}
enum TroopSituations << enumeration >> {
  + TroopSituations(): 
  + values(): TroopSituations[]
  + valueOf(String): TroopSituations
}
enum Troops << enumeration >> {
  - Troops(int, int, int): 
  - defence: double
  - speed: double
  - damage: double
  + valueOf(String): Troops
  + values(): Troops[]
   defence: double
   damage: double
   speed: double
}
class UnitController {
  + UnitController(): 
  + attackEnemy(String): Messages?
  + attack(Troop, int, int): Messages?
  + dropUnit(int, int, String, int): Messages?
  + createUnit(int, int, String): Messages?
  + moveUnitTo(int, int): Messages?
  + patrolUnit(int, int): Messages?
  + selectUnit(int, int): Messages?
  + SetUnitSituation(int, int, int): Messages?
  + attackUnit(Troop, int, int): Messages?
  + clear(int, int): Messages?
  + pourOil(String, Direction): Messages?
}
class User {
  + User(String, String, String, String, String, String, String): 
  - highScore: int
  - passwordRecoveryAnswer: String
  - username: String
  - email: String
  - users: HashMap<String, User>
  - scores: ArrayList<Score>
  - passwordRecoveryQuestion: String
  - nickname: String
  - password: String
  - slogan: String
  + DoesUserExit(String): boolean
  + getUserByUsername(String): User
  + addUser(User): void
  + IsPasswordCurrent(String): boolean
  + removeUser(User): void
   passwordRecoveryAnswer: String
   rank: int
   users: HashMap<String, User>
   password: String
   passwordRecoveryQuestion: String
   highScore: int
   email: String
   username: String
   scores: ArrayList<Score>
   nickname: String
   slogan: String
}
class Weaponry {
  + Weaponry(WeaponryTypes): 
  + generate(): void
}
class WeaponryTypes {
  ~ WeaponryTypes(Weapons, String, double, double): 
}
enum Weapons << enumeration >> {
  + Weapons(): 
  + valueOf(String): Weapons
  + values(): Weapons[]
}

Armoury               -[#000082,plain]-^  Building             
Armoury              "1" *-[#595959,plain]-> "weapons\n*" Weapons              
Assassins             -[#000082,plain]-^  Troop                
Base                 "1" *-[#595959,plain]-> "type\n1" BaseType             
Block                "1" *-[#595959,plain]-> "buildings\n*" Building             
Block                "1" *-[#595959,plain]-> "permeability\n1" PermeabilityType     
Block                "1" *-[#595959,plain]-> "people\n*" Person               
Block                "1" *-[#595959,plain]-> "type\n1" Textures             
BuildingController    -[#000082,plain]-^  KingdomController    
ControllerUtils      "1" *-[#595959,plain]-> "currentUser\n1" User                 
Farm                  -[#000082,plain]-^  Building             
Farm                 "1" *-[#595959,plain]-> "type\n1" FarmType             
Farm                 "1" *-[#595959,plain]-> "foodToBeGenerated\n1" Food                 
FarmType             "1" *-[#595959,plain]-> "food\n1" Food                 
FireTowers            -[#000082,plain]-^  Troop                
FoodStockpile         -[#000082,plain]-^  Building             
FoodStockpile        "1" *-[#595959,plain]-> "foods\n*" Food                 
HorseArchers          -[#000082,plain]-^  Troop                
Kingdom              "1" *-[#595959,plain]-> "foods\n*" Food                 
Kingdom              "1" *-[#595959,plain]-> "goods\n*" Good                 
KingdomController    "1" *-[#595959,plain]-> "owner\n1" User                 
Map                   -[#595959,dashed]->  Block                : "«create»"
MarketController      -[#000082,plain]-^  KingdomController    
Mine                  -[#000082,plain]-^  Building             
Mine                 "1" *-[#595959,plain]-> "goodToBeGenerated\n1" Good                 
Mine                 "1" *-[#595959,plain]-> "type\n1" MineTypes            
MineTypes            "1" *-[#595959,plain]-> "good\n1" Good                 
Ordinary              -[#000082,plain]-^  Troop                
Person               "1" *-[#595959,plain]-> "habitat\n1" Building             
Person               "1" *-[#595959,plain]-> "type\n1" Persons              
Person               "1" *-[#595959,plain]-> "owner\n1" User                 
ProfileController    "1" *-[#595959,plain]-> "currentUser\n1" User                 
Score                "1" *-[#595959,plain]-> "game\n1" Game                 
Score                "1" *-[#595959,plain]-> "owner\n1" User                 
Slinger               -[#000082,plain]-^  Troop                
StartGameController   -[#000082,plain]-^  KingdomController    
StoneGatehouse        -[#000082,plain]-^  Building             
StoneGatehouse       "1" *-[#595959,plain]-> "type\n1" StoneGatehouses      
StoneGatehouses       -[#000082,plain]-^  Building             
Tower                 -[#000082,plain]-^  Building             
Tower                "1" *-[#595959,plain]-> "type\n1" Towers               
Trade                "1" *-[#595959,plain]-> "providedGoods\n*" Good                 
Trade                "1" *-[#595959,plain]-> "owner\n1" User                 
TradeController       -[#000082,plain]-^  KingdomController    
Traps                "1" *-[#595959,plain]-> "type\n1" TrapTypes            
Troop                "1" *-[#595959,plain]-> "nationality\n1" Nationality          
Troop                 -[#000082,plain]-^  Person               
Troop                "1" *-[#595959,plain]-> "troopType\n1" Troops               
Troop                "1" *-[#595959,plain]-> "owner\n1" User                 
UnitController        -[#000082,plain]-^  KingdomController    
User                 "1" *-[#595959,plain]-> "scores\n*" Score                
Weaponry              -[#000082,plain]-^  Building             
Weaponry             "1" *-[#595959,plain]-> "type\n1" WeaponryTypes        
Weaponry             "1" *-[#595959,plain]-> "weaponToBeGenerated\n1" Weapons              
WeaponryTypes        "1" *-[#595959,plain]-> "weapon\n1" Weapons              
@enduml
